<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" ResponseEncoding="UTF-8" Src="" Inherits="" Debug="True" Description="Template description here." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>

<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

<%-- 注册 定义的成员变量 --%>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="DB" Description="请选择名的数据来源" %>
<%@ Property Name="RootTableSpaceName" Type="System.String" Default="com.scm.{modelname模块名称}." Optional="False" Category="Context" Description="源码输出的模块名称" %>

<%-- 启用 MAP方式 System-CSharpAlias  --%>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Map Name="JavaAlias" Src="System-JavaAlias.csmap" Description="Oracle to Java Type Map" %>

<script runat="template">
<!-- #include file=getNamefunction.cs -->

//Debugger.Break();


</script>

<%-- 启用 MAP方式 System-CSharpAlias  --%>
package service;

import bean.Constants;
import com.users.ejb.<%= ModelName(SourceTable.Name)%>;
import dao.<%= ModelName(SourceTable.Name)%>DaoIml;

import java.util.HashMap;
import java.util.Map;
import java.util.List;
import com.opensymphony.xwork2.ActionSupport; 

/**
 * <p>Title: ejb title </p>
 * <p>Description: <%=SourceTable.Name%> Client Service 处理类</p>
 * @author yangqinxu 电话：137****5317
 * @version 1.0 时间  <%= DateTime.Now.ToString()%>
 */

public class <%= ModelName(SourceTable.Name)%>Impl extends ActionSupport {	
    private static final long serialVersionUID = 1L;
    private <%= ModelName(SourceTable.Name)%>DaoIml  <%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>Dao;  
    private Map<String,Object> dataMap;
    private String message;     
    private <%= ModelName(SourceTable.Name)%> <%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>;
    private int page; 
    private int errcode;
    
    public int getErrcode() {
		return errcode;
	}

	public void setErrcode(int errcode) {
		this.errcode = errcode;
	}
   
	public <%= ModelName(SourceTable.Name)%> <%= getFunctionMemberVariableName(ParameterName(SourceTable.Name)) %>() {
		return <%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>;
	}

	public void <%= setFunctionMemberVariableName(ParameterName(SourceTable.Name))%>(<%= ModelName(SourceTable.Name)%> r<%= ParameterName(SourceTable.Name)%>Info) {
		this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %> =  r<%= ParameterName(SourceTable.Name)%>Info;
	}    
    
	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}		    
    
	public Map<String, Object> getDataMap() {
		return dataMap;
	}
    
    public String getMessage() {  
        return message;  
    }  
  
    public void setMessage(String message) {  
        this.message = message;  
    }
    
    public <%= ModelName(SourceTable.Name)%>DaoIml <%= getFunctionMemberVariableName(ParameterName(SourceTable.Name))%>Dao() {
		return <%= GetMemberVariableName(ParameterName(SourceTable.Name))%>Dao;
	}
    
	public void <%= setFunctionMemberVariableName(ModelName(SourceTable.Name))%>Dao (<%= ModelName(SourceTable.Name)%>DaoIml r<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>Dao) {		     
         this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>Dao = r<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>Dao;
	}
       
	public String Add<%= ModelName(SourceTable.Name)%>() {	
    
    try {
 	  if(this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>.<%= getFunctionMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>() == null || this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>.<%= getFunctionMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>().length() <= 0){		
		  this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>Dao.Add(this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>);	
		  this.message ="新增成功";
	  }
      else
	  {
          this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>Dao.Update(this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>);	
		  this.message ="更新成功";
	  }     
      } catch (RuntimeException ex) {
		  this.message = ex.getMessage();
		  this.errcode = ex.hashCode();
	   }
	  
	  dataMap = new HashMap<String, Object>();
      dataMap.put("errcode", this.errcode);
	  dataMap.put("success", true);
	  dataMap.put("message", this.message);
	  
	  return SUCCESS;   			
	}
  
	private HashMap<String, String> GetQueryMap()
	{				
        HashMap<String, String> map = new HashMap<String, String>();
		if(this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>!=null){
        <% foreach (ColumnSchema column in this.SourceTable.Columns)  { %>
        if(this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>.<%= getFunctionMemberVariableName(column.Name) %>()!=null && !this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>.<%= getFunctionMemberVariableName(column.Name) %>().equals("")){
			map.put("<%= GetMemberVariableName(column.Name) %>", this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>.<%= getFunctionMemberVariableName(column.Name) %>().toString());
         }
        <% } %>       
        }
		
		return map;		
	}
    
	public String Query<%= ModelName(SourceTable.Name)%>() {
		dataMap = new HashMap<String, Object>();		
		int offset = this.getPage();		
		
		int pagesize = Constants.PAGE_SIZE;
		
		if (offset>0){
			offset = (offset-1) * pagesize;
		}
        
        HashMap<String, String> map = this.GetQueryMap();
        
        try {
		List<<%= ModelName(SourceTable.Name)%>>  list<%= ModelName(SourceTable.Name)%>= this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>Dao.GetAll(offset, pagesize,map);
		
		int size = this.<%= GetMemberVariableName(ParameterName(SourceTable.Name)) %>Dao.GetCount(map);
				
		dataMap.put("rows", list<%= ModelName(SourceTable.Name)%>);
		dataMap.put("total", size);
        
 	    } catch (RuntimeException ex) {
			this.message = ex.getMessage();
			this.errcode = ex.hashCode();
		}  
        
        dataMap.put("errcode", this.errcode);
		dataMap.put("message", this.message);
        
		return SUCCESS;
	} 
    
 	public String Find<%= ModelName(SourceTable.Name)%>() {		    
		 if(this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>.<%= getFunctionMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>() == null || this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>.<%= getFunctionMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>().length() <= 0){		
			 
		 }else
		 {
			 this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%> = this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>Dao.Find(this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>.<%= getFunctionMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>());
			 
			 dataMap = new HashMap<String, Object>();		
			 dataMap.put("<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>", this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>);
			 
		 }
	     return SUCCESS;
	    
		} 
        
        
    public String Delete<%= ModelName(SourceTable.Name)%>() {
        try {
		this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>Dao
				.Delete(this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>.<%= getFunctionMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>());

		this.message = "成功删除";
        } catch (RuntimeException ex) {
			this.message = ex.getMessage();
			this.errcode = ex.hashCode();
		}	
        
		dataMap = new HashMap<String, Object>();
		dataMap.put("id", this.<%= GetMemberVariableName(ParameterName(SourceTable.Name))%>.<%= getFunctionMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0].Name)%>());
		dataMap.put("errcode", this.errcode);
        dataMap.put("success", true);
		dataMap.put("message", this.message);

		return SUCCESS;
	}
    
	public String List() {		 
	    return SUCCESS;
	}
}
